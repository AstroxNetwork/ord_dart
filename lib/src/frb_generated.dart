// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/rune.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class OrdDart extends BaseEntrypoint<OrdDartApi, OrdDartApiImpl, OrdDartWire> {
  @internal
  static final instance = OrdDart._();

  OrdDart._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    OrdDartApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required OrdDartApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<OrdDartApiImpl, OrdDartWire> get apiImplConstructor =>
      OrdDartApiImpl.new;

  @override
  WireConstructor<OrdDartWire> get wireConstructor =>
      OrdDartWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 286598445;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'ord_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class OrdDartApi extends BaseApi {
  Edict? crateApiRuneEdictFromIntegers(
      {required String rawTx,
      required RuneId id,
      required BigInt amount,
      required BigInt output});

  int crateApiRuneEtchingMaxDivisibility();

  int crateApiRuneEtchingMaxSpacers();

  BigInt? crateApiRuneEtchingSupply({required Etching that});

  Uint8List crateApiRuneRuneCommitment({required Rune that});

  int crateApiRuneRuneFirstRuneHeight({required Network network});

  Rune crateApiRuneRuneFromStr({required String s});

  (BigInt, BigInt)? crateApiRuneRuneIdDelta(
      {required RuneId that, required RuneId next});

  RuneId crateApiRuneRuneIdFromStr({required String s});

  RuneId? crateApiRuneRuneIdNext(
      {required RuneId that, required BigInt block, required BigInt tx});

  bool crateApiRuneRuneIsReserved({required Rune that});

  Rune crateApiRuneRuneMinimumAtHeight(
      {required Network chain, required int height});

  BigInt crateApiRuneRuneN({required Rune that});

  Rune crateApiRuneRuneReserved({required BigInt block, required int tx});

  String crateApiRuneRuneToString({required Rune that});

  int crateApiRuneRunestoneCommitConfirmations();

  Artifact? crateApiRuneRunestoneDecipher({required String rawTx});

  Future<Artifact?> crateApiRuneRunestoneDecipherAsync({required String rawTx});

  Uint8List crateApiRuneRunestoneEncipher({required Runestone that});

  Future<Uint8List> crateApiRuneRunestoneEncipherAsync(
      {required Runestone that});

  int crateApiRuneRunestoneMagicNumber();

  SpacedRune crateApiRuneSpacedRuneFromStr({required String s});

  String crateApiRuneSpacedRuneToString({required SpacedRune that});
}

class OrdDartApiImpl extends OrdDartApiImplPlatform implements OrdDartApi {
  OrdDartApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Edict? crateApiRuneEdictFromIntegers(
      {required String rawTx,
      required RuneId id,
      required BigInt amount,
      required BigInt output}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(rawTx, serializer);
        sse_encode_box_autoadd_rune_id(id, serializer);
        sse_encode_U128(amount, serializer);
        sse_encode_U128(output, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_edict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneEdictFromIntegersConstMeta,
      argValues: [rawTx, id, amount, output],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneEdictFromIntegersConstMeta =>
      const TaskConstMeta(
        debugName: "edict_from_integers",
        argNames: ["rawTx", "id", "amount", "output"],
      );

  @override
  int crateApiRuneEtchingMaxDivisibility() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneEtchingMaxDivisibilityConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneEtchingMaxDivisibilityConstMeta =>
      const TaskConstMeta(
        debugName: "etching_max_divisibility",
        argNames: [],
      );

  @override
  int crateApiRuneEtchingMaxSpacers() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneEtchingMaxSpacersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneEtchingMaxSpacersConstMeta =>
      const TaskConstMeta(
        debugName: "etching_max_spacers",
        argNames: [],
      );

  @override
  BigInt? crateApiRuneEtchingSupply({required Etching that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_etching(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_U128,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneEtchingSupplyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneEtchingSupplyConstMeta => const TaskConstMeta(
        debugName: "etching_supply",
        argNames: ["that"],
      );

  @override
  Uint8List crateApiRuneRuneCommitment({required Rune that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneCommitmentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneCommitmentConstMeta => const TaskConstMeta(
        debugName: "rune_commitment",
        argNames: ["that"],
      );

  @override
  int crateApiRuneRuneFirstRuneHeight({required Network network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneFirstRuneHeightConstMeta,
      argValues: [network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneFirstRuneHeightConstMeta =>
      const TaskConstMeta(
        debugName: "rune_first_rune_height",
        argNames: ["network"],
      );

  @override
  Rune crateApiRuneRuneFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rune,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneFromStrConstMeta => const TaskConstMeta(
        debugName: "rune_from_str",
        argNames: ["s"],
      );

  @override
  (BigInt, BigInt)? crateApiRuneRuneIdDelta(
      {required RuneId that, required RuneId next}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune_id(that, serializer);
        sse_encode_box_autoadd_rune_id(next, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_record_u_128_u_128,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneIdDeltaConstMeta,
      argValues: [that, next],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneIdDeltaConstMeta => const TaskConstMeta(
        debugName: "rune_id_delta",
        argNames: ["that", "next"],
      );

  @override
  RuneId crateApiRuneRuneIdFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rune_id,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneIdFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneIdFromStrConstMeta => const TaskConstMeta(
        debugName: "rune_id_from_str",
        argNames: ["s"],
      );

  @override
  RuneId? crateApiRuneRuneIdNext(
      {required RuneId that, required BigInt block, required BigInt tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune_id(that, serializer);
        sse_encode_U128(block, serializer);
        sse_encode_U128(tx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_rune_id,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneIdNextConstMeta,
      argValues: [that, block, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneIdNextConstMeta => const TaskConstMeta(
        debugName: "rune_id_next",
        argNames: ["that", "block", "tx"],
      );

  @override
  bool crateApiRuneRuneIsReserved({required Rune that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneIsReservedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneIsReservedConstMeta => const TaskConstMeta(
        debugName: "rune_is_reserved",
        argNames: ["that"],
      );

  @override
  Rune crateApiRuneRuneMinimumAtHeight(
      {required Network chain, required int height}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network(chain, serializer);
        sse_encode_u_32(height, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rune,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneMinimumAtHeightConstMeta,
      argValues: [chain, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneMinimumAtHeightConstMeta =>
      const TaskConstMeta(
        debugName: "rune_minimum_at_height",
        argNames: ["chain", "height"],
      );

  @override
  BigInt crateApiRuneRuneN({required Rune that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_U128,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneNConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneNConstMeta => const TaskConstMeta(
        debugName: "rune_n",
        argNames: ["that"],
      );

  @override
  Rune crateApiRuneRuneReserved({required BigInt block, required int tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(block, serializer);
        sse_encode_u_32(tx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rune,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneReservedConstMeta,
      argValues: [block, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneReservedConstMeta => const TaskConstMeta(
        debugName: "rune_reserved",
        argNames: ["block", "tx"],
      );

  @override
  String crateApiRuneRuneToString({required Rune that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_rune(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRuneToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRuneToStringConstMeta => const TaskConstMeta(
        debugName: "rune_to_string",
        argNames: ["that"],
      );

  @override
  int crateApiRuneRunestoneCommitConfirmations() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneCommitConfirmationsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneCommitConfirmationsConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_commit_confirmations",
        argNames: [],
      );

  @override
  Artifact? crateApiRuneRunestoneDecipher({required String rawTx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(rawTx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_artifact,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneDecipherConstMeta,
      argValues: [rawTx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneDecipherConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_decipher",
        argNames: ["rawTx"],
      );

  @override
  Future<Artifact?> crateApiRuneRunestoneDecipherAsync(
      {required String rawTx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(rawTx, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_artifact,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneDecipherAsyncConstMeta,
      argValues: [rawTx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneDecipherAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_decipher_async",
        argNames: ["rawTx"],
      );

  @override
  Uint8List crateApiRuneRunestoneEncipher({required Runestone that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_runestone(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneEncipherConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneEncipherConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_encipher",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> crateApiRuneRunestoneEncipherAsync(
      {required Runestone that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_runestone(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneEncipherAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneEncipherAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_encipher_async",
        argNames: ["that"],
      );

  @override
  int crateApiRuneRunestoneMagicNumber() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneRunestoneMagicNumberConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneRunestoneMagicNumberConstMeta =>
      const TaskConstMeta(
        debugName: "runestone_magic_number",
        argNames: [],
      );

  @override
  SpacedRune crateApiRuneSpacedRuneFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_spaced_rune,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneSpacedRuneFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneSpacedRuneFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "spaced_rune_from_str",
        argNames: ["s"],
      );

  @override
  String crateApiRuneSpacedRuneToString({required SpacedRune that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_spaced_rune(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRuneSpacedRuneToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRuneSpacedRuneToStringConstMeta =>
      const TaskConstMeta(
        debugName: "spaced_rune_to_string",
        argNames: ["that"],
      );

  @protected
  String dco_decode_Char(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return String.fromCharCode(raw);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  Artifact dco_decode_artifact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Artifact_Cenotaph(
          dco_decode_box_autoadd_cenotaph(raw[1]),
        );
      case 1:
        return Artifact_Runestone(
          dco_decode_box_autoadd_runestone(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Artifact dco_decode_box_autoadd_artifact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_artifact(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Cenotaph dco_decode_box_autoadd_cenotaph(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_cenotaph(raw);
  }

  @protected
  Edict dco_decode_box_autoadd_edict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_edict(raw);
  }

  @protected
  Etching dco_decode_box_autoadd_etching(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_etching(raw);
  }

  @protected
  Flaw dco_decode_box_autoadd_flaw(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flaw(raw);
  }

  @protected
  (BigInt?, BigInt?)
      dco_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (BigInt?, BigInt?);
  }

  @protected
  (BigInt, BigInt) dco_decode_box_autoadd_record_u_128_u_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (BigInt, BigInt);
  }

  @protected
  Rune dco_decode_box_autoadd_rune(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rune(raw);
  }

  @protected
  RuneId dco_decode_box_autoadd_rune_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rune_id(raw);
  }

  @protected
  Runestone dco_decode_box_autoadd_runestone(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_runestone(raw);
  }

  @protected
  SpacedRune dco_decode_box_autoadd_spaced_rune(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_spaced_rune(raw);
  }

  @protected
  Terms dco_decode_box_autoadd_terms(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_terms(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Cenotaph dco_decode_cenotaph(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Cenotaph(
      etching: dco_decode_opt_box_autoadd_rune(arr[0]),
      flaw: dco_decode_opt_box_autoadd_flaw(arr[1]),
      mint: dco_decode_opt_box_autoadd_rune_id(arr[2]),
    );
  }

  @protected
  Edict dco_decode_edict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Edict(
      id: dco_decode_rune_id(arr[0]),
      amount: dco_decode_U128(arr[1]),
      output: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  Etching dco_decode_etching(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Etching(
      divisibility: dco_decode_opt_box_autoadd_u_8(arr[0]),
      premine: dco_decode_opt_U128(arr[1]),
      rune: dco_decode_opt_box_autoadd_rune(arr[2]),
      spacers: dco_decode_opt_box_autoadd_u_32(arr[3]),
      symbol: dco_decode_opt_Char(arr[4]),
      terms: dco_decode_opt_box_autoadd_terms(arr[5]),
      turbo: dco_decode_opt_box_autoadd_bool(arr[6]),
    );
  }

  @protected
  Flaw dco_decode_flaw(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Flaw.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Edict> dco_decode_list_edict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_edict).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  String? dco_decode_opt_Char(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Char(raw);
  }

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_U128(raw);
  }

  @protected
  Artifact? dco_decode_opt_box_autoadd_artifact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_artifact(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  Edict? dco_decode_opt_box_autoadd_edict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_edict(raw);
  }

  @protected
  Etching? dco_decode_opt_box_autoadd_etching(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_etching(raw);
  }

  @protected
  Flaw? dco_decode_opt_box_autoadd_flaw(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_flaw(raw);
  }

  @protected
  (
    BigInt?,
    BigInt?
  )? dco_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
            raw);
  }

  @protected
  (BigInt, BigInt)? dco_decode_opt_box_autoadd_record_u_128_u_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_record_u_128_u_128(raw);
  }

  @protected
  Rune? dco_decode_opt_box_autoadd_rune(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rune(raw);
  }

  @protected
  RuneId? dco_decode_opt_box_autoadd_rune_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rune_id(raw);
  }

  @protected
  Terms? dco_decode_opt_box_autoadd_terms(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_terms(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  List<Edict>? dco_decode_opt_list_edict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_edict(raw);
  }

  @protected
  (BigInt?, BigInt?)
      dco_decode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_64(arr[0]),
      dco_decode_opt_box_autoadd_u_64(arr[1]),
    );
  }

  @protected
  (BigInt, BigInt) dco_decode_record_u_128_u_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_U128(arr[0]),
      dco_decode_U128(arr[1]),
    );
  }

  @protected
  Rune dco_decode_rune(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Rune(
      field0: dco_decode_U128(arr[0]),
    );
  }

  @protected
  RuneId dco_decode_rune_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RuneId(
      block: dco_decode_u_64(arr[0]),
      tx: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  Runestone dco_decode_runestone(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Runestone(
      edicts: dco_decode_opt_list_edict(arr[0]),
      etching: dco_decode_opt_box_autoadd_etching(arr[1]),
      mint: dco_decode_opt_box_autoadd_rune_id(arr[2]),
      pointer: dco_decode_opt_box_autoadd_u_32(arr[3]),
    );
  }

  @protected
  SpacedRune dco_decode_spaced_rune(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SpacedRune(
      rune: dco_decode_rune(arr[0]),
      spacers: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  Terms dco_decode_terms(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Terms(
      amount: dco_decode_opt_U128(arr[0]),
      cap: dco_decode_opt_U128(arr[1]),
      height:
          dco_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
              arr[2]),
      offset:
          dco_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
              arr[3]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_Char(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  Artifact sse_decode_artifact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_cenotaph(deserializer);
        return Artifact_Cenotaph(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_runestone(deserializer);
        return Artifact_Runestone(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Artifact sse_decode_box_autoadd_artifact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_artifact(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  Cenotaph sse_decode_box_autoadd_cenotaph(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_cenotaph(deserializer));
  }

  @protected
  Edict sse_decode_box_autoadd_edict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_edict(deserializer));
  }

  @protected
  Etching sse_decode_box_autoadd_etching(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_etching(deserializer));
  }

  @protected
  Flaw sse_decode_box_autoadd_flaw(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flaw(deserializer));
  }

  @protected
  (BigInt?, BigInt?)
      sse_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
        deserializer));
  }

  @protected
  (BigInt, BigInt) sse_decode_box_autoadd_record_u_128_u_128(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_u_128_u_128(deserializer));
  }

  @protected
  Rune sse_decode_box_autoadd_rune(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rune(deserializer));
  }

  @protected
  RuneId sse_decode_box_autoadd_rune_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rune_id(deserializer));
  }

  @protected
  Runestone sse_decode_box_autoadd_runestone(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_runestone(deserializer));
  }

  @protected
  SpacedRune sse_decode_box_autoadd_spaced_rune(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_spaced_rune(deserializer));
  }

  @protected
  Terms sse_decode_box_autoadd_terms(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_terms(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  Cenotaph sse_decode_cenotaph(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_etching = sse_decode_opt_box_autoadd_rune(deserializer);
    var var_flaw = sse_decode_opt_box_autoadd_flaw(deserializer);
    var var_mint = sse_decode_opt_box_autoadd_rune_id(deserializer);
    return Cenotaph(etching: var_etching, flaw: var_flaw, mint: var_mint);
  }

  @protected
  Edict sse_decode_edict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_rune_id(deserializer);
    var var_amount = sse_decode_U128(deserializer);
    var var_output = sse_decode_u_32(deserializer);
    return Edict(id: var_id, amount: var_amount, output: var_output);
  }

  @protected
  Etching sse_decode_etching(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_divisibility = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_premine = sse_decode_opt_U128(deserializer);
    var var_rune = sse_decode_opt_box_autoadd_rune(deserializer);
    var var_spacers = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_symbol = sse_decode_opt_Char(deserializer);
    var var_terms = sse_decode_opt_box_autoadd_terms(deserializer);
    var var_turbo = sse_decode_opt_box_autoadd_bool(deserializer);
    return Etching(
        divisibility: var_divisibility,
        premine: var_premine,
        rune: var_rune,
        spacers: var_spacers,
        symbol: var_symbol,
        terms: var_terms,
        turbo: var_turbo);
  }

  @protected
  Flaw sse_decode_flaw(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Flaw.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Edict> sse_decode_list_edict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Edict>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_edict(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  String? sse_decode_opt_Char(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Char(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_U128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Artifact? sse_decode_opt_box_autoadd_artifact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_artifact(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Edict? sse_decode_opt_box_autoadd_edict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_edict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Etching? sse_decode_opt_box_autoadd_etching(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_etching(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Flaw? sse_decode_opt_box_autoadd_flaw(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_flaw(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    BigInt?,
    BigInt?
  )? sse_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  (BigInt, BigInt)? sse_decode_opt_box_autoadd_record_u_128_u_128(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_u_128_u_128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Rune? sse_decode_opt_box_autoadd_rune(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rune(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuneId? sse_decode_opt_box_autoadd_rune_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rune_id(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Terms? sse_decode_opt_box_autoadd_terms(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_terms(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Edict>? sse_decode_opt_list_edict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_edict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (BigInt?, BigInt?)
      sse_decode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_field1 = sse_decode_opt_box_autoadd_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, BigInt) sse_decode_record_u_128_u_128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_U128(deserializer);
    var var_field1 = sse_decode_U128(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Rune sse_decode_rune(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_U128(deserializer);
    return Rune(field0: var_field0);
  }

  @protected
  RuneId sse_decode_rune_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_block = sse_decode_u_64(deserializer);
    var var_tx = sse_decode_u_32(deserializer);
    return RuneId(block: var_block, tx: var_tx);
  }

  @protected
  Runestone sse_decode_runestone(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_edicts = sse_decode_opt_list_edict(deserializer);
    var var_etching = sse_decode_opt_box_autoadd_etching(deserializer);
    var var_mint = sse_decode_opt_box_autoadd_rune_id(deserializer);
    var var_pointer = sse_decode_opt_box_autoadd_u_32(deserializer);
    return Runestone(
        edicts: var_edicts,
        etching: var_etching,
        mint: var_mint,
        pointer: var_pointer);
  }

  @protected
  SpacedRune sse_decode_spaced_rune(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rune = sse_decode_rune(deserializer);
    var var_spacers = sse_decode_u_32(deserializer);
    return SpacedRune(rune: var_rune, spacers: var_spacers);
  }

  @protected
  Terms sse_decode_terms(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_opt_U128(deserializer);
    var var_cap = sse_decode_opt_U128(deserializer);
    var var_height =
        sse_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
            deserializer);
    var var_offset =
        sse_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
            deserializer);
    return Terms(
        amount: var_amount,
        cap: var_cap,
        height: var_height,
        offset: var_offset);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_Char(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_artifact(Artifact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Artifact_Cenotaph(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_cenotaph(field0, serializer);
      case Artifact_Runestone(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_runestone(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_artifact(
      Artifact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_artifact(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_cenotaph(
      Cenotaph self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cenotaph(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_edict(Edict self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_edict(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_etching(Etching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_etching(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flaw(Flaw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flaw(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      (BigInt?, BigInt?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_u_128_u_128(
      (BigInt, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_128_u_128(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rune(Rune self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rune(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rune_id(RuneId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rune_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_runestone(
      Runestone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_runestone(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_spaced_rune(
      SpacedRune self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_spaced_rune(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_terms(Terms self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_terms(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_cenotaph(Cenotaph self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_rune(self.etching, serializer);
    sse_encode_opt_box_autoadd_flaw(self.flaw, serializer);
    sse_encode_opt_box_autoadd_rune_id(self.mint, serializer);
  }

  @protected
  void sse_encode_edict(Edict self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rune_id(self.id, serializer);
    sse_encode_U128(self.amount, serializer);
    sse_encode_u_32(self.output, serializer);
  }

  @protected
  void sse_encode_etching(Etching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_8(self.divisibility, serializer);
    sse_encode_opt_U128(self.premine, serializer);
    sse_encode_opt_box_autoadd_rune(self.rune, serializer);
    sse_encode_opt_box_autoadd_u_32(self.spacers, serializer);
    sse_encode_opt_Char(self.symbol, serializer);
    sse_encode_opt_box_autoadd_terms(self.terms, serializer);
    sse_encode_opt_box_autoadd_bool(self.turbo, serializer);
  }

  @protected
  void sse_encode_flaw(Flaw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_edict(List<Edict> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_edict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_Char(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Char(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_U128(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_artifact(
      Artifact? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_artifact(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_edict(Edict? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_edict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_etching(
      Etching? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_etching(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_flaw(Flaw? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_flaw(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          (BigInt?, BigInt?)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_u_128_u_128(
      (BigInt, BigInt)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_u_128_u_128(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rune(Rune? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rune(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rune_id(
      RuneId? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rune_id(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_terms(Terms? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_terms(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_edict(List<Edict>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_edict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      (BigInt?, BigInt?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.$1, serializer);
    sse_encode_opt_box_autoadd_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_128_u_128(
      (BigInt, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_U128(self.$1, serializer);
    sse_encode_U128(self.$2, serializer);
  }

  @protected
  void sse_encode_rune(Rune self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_U128(self.field0, serializer);
  }

  @protected
  void sse_encode_rune_id(RuneId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.block, serializer);
    sse_encode_u_32(self.tx, serializer);
  }

  @protected
  void sse_encode_runestone(Runestone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_edict(self.edicts, serializer);
    sse_encode_opt_box_autoadd_etching(self.etching, serializer);
    sse_encode_opt_box_autoadd_rune_id(self.mint, serializer);
    sse_encode_opt_box_autoadd_u_32(self.pointer, serializer);
  }

  @protected
  void sse_encode_spaced_rune(SpacedRune self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rune(self.rune, serializer);
    sse_encode_u_32(self.spacers, serializer);
  }

  @protected
  void sse_encode_terms(Terms self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_U128(self.amount, serializer);
    sse_encode_opt_U128(self.cap, serializer);
    sse_encode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
        self.height, serializer);
    sse_encode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
        self.offset, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}

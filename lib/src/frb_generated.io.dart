// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/rune.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'package:meta/meta.dart' as meta;

abstract class OrdDartApiImplPlatform extends BaseApiImpl<OrdDartWire> {
  OrdDartApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_Char(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  BigInt dco_decode_U128(dynamic raw);

  @protected
  Artifact dco_decode_artifact(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Artifact dco_decode_box_autoadd_artifact(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  Cenotaph dco_decode_box_autoadd_cenotaph(dynamic raw);

  @protected
  Edict dco_decode_box_autoadd_edict(dynamic raw);

  @protected
  Etching dco_decode_box_autoadd_etching(dynamic raw);

  @protected
  Flaw dco_decode_box_autoadd_flaw(dynamic raw);

  @protected
  (BigInt?, BigInt?)
      dco_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          dynamic raw);

  @protected
  (BigInt, BigInt) dco_decode_box_autoadd_record_u_128_u_128(dynamic raw);

  @protected
  Rune dco_decode_box_autoadd_rune(dynamic raw);

  @protected
  RuneId dco_decode_box_autoadd_rune_id(dynamic raw);

  @protected
  Runestone dco_decode_box_autoadd_runestone(dynamic raw);

  @protected
  SpacedRune dco_decode_box_autoadd_spaced_rune(dynamic raw);

  @protected
  Terms dco_decode_box_autoadd_terms(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  Cenotaph dco_decode_cenotaph(dynamic raw);

  @protected
  Edict dco_decode_edict(dynamic raw);

  @protected
  Etching dco_decode_etching(dynamic raw);

  @protected
  Flaw dco_decode_flaw(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<Edict> dco_decode_list_edict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  String? dco_decode_opt_Char(dynamic raw);

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw);

  @protected
  Artifact? dco_decode_opt_box_autoadd_artifact(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  Edict? dco_decode_opt_box_autoadd_edict(dynamic raw);

  @protected
  Etching? dco_decode_opt_box_autoadd_etching(dynamic raw);

  @protected
  Flaw? dco_decode_opt_box_autoadd_flaw(dynamic raw);

  @protected
  (
    BigInt?,
    BigInt?
  )? dco_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      dynamic raw);

  @protected
  (BigInt, BigInt)? dco_decode_opt_box_autoadd_record_u_128_u_128(dynamic raw);

  @protected
  Rune? dco_decode_opt_box_autoadd_rune(dynamic raw);

  @protected
  RuneId? dco_decode_opt_box_autoadd_rune_id(dynamic raw);

  @protected
  Terms? dco_decode_opt_box_autoadd_terms(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  List<Edict>? dco_decode_opt_list_edict(dynamic raw);

  @protected
  (BigInt?, BigInt?)
      dco_decode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(dynamic raw);

  @protected
  (BigInt, BigInt) dco_decode_record_u_128_u_128(dynamic raw);

  @protected
  Rune dco_decode_rune(dynamic raw);

  @protected
  RuneId dco_decode_rune_id(dynamic raw);

  @protected
  Runestone dco_decode_runestone(dynamic raw);

  @protected
  SpacedRune dco_decode_spaced_rune(dynamic raw);

  @protected
  Terms dco_decode_terms(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_Char(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer);

  @protected
  Artifact sse_decode_artifact(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Artifact sse_decode_box_autoadd_artifact(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  Cenotaph sse_decode_box_autoadd_cenotaph(SseDeserializer deserializer);

  @protected
  Edict sse_decode_box_autoadd_edict(SseDeserializer deserializer);

  @protected
  Etching sse_decode_box_autoadd_etching(SseDeserializer deserializer);

  @protected
  Flaw sse_decode_box_autoadd_flaw(SseDeserializer deserializer);

  @protected
  (BigInt?, BigInt?)
      sse_decode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          SseDeserializer deserializer);

  @protected
  (BigInt, BigInt) sse_decode_box_autoadd_record_u_128_u_128(
      SseDeserializer deserializer);

  @protected
  Rune sse_decode_box_autoadd_rune(SseDeserializer deserializer);

  @protected
  RuneId sse_decode_box_autoadd_rune_id(SseDeserializer deserializer);

  @protected
  Runestone sse_decode_box_autoadd_runestone(SseDeserializer deserializer);

  @protected
  SpacedRune sse_decode_box_autoadd_spaced_rune(SseDeserializer deserializer);

  @protected
  Terms sse_decode_box_autoadd_terms(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  Cenotaph sse_decode_cenotaph(SseDeserializer deserializer);

  @protected
  Edict sse_decode_edict(SseDeserializer deserializer);

  @protected
  Etching sse_decode_etching(SseDeserializer deserializer);

  @protected
  Flaw sse_decode_flaw(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<Edict> sse_decode_list_edict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_Char(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer);

  @protected
  Artifact? sse_decode_opt_box_autoadd_artifact(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  Edict? sse_decode_opt_box_autoadd_edict(SseDeserializer deserializer);

  @protected
  Etching? sse_decode_opt_box_autoadd_etching(SseDeserializer deserializer);

  @protected
  Flaw? sse_decode_opt_box_autoadd_flaw(SseDeserializer deserializer);

  @protected
  (
    BigInt?,
    BigInt?
  )? sse_decode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      SseDeserializer deserializer);

  @protected
  (BigInt, BigInt)? sse_decode_opt_box_autoadd_record_u_128_u_128(
      SseDeserializer deserializer);

  @protected
  Rune? sse_decode_opt_box_autoadd_rune(SseDeserializer deserializer);

  @protected
  RuneId? sse_decode_opt_box_autoadd_rune_id(SseDeserializer deserializer);

  @protected
  Terms? sse_decode_opt_box_autoadd_terms(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  List<Edict>? sse_decode_opt_list_edict(SseDeserializer deserializer);

  @protected
  (BigInt?, BigInt?)
      sse_decode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          SseDeserializer deserializer);

  @protected
  (BigInt, BigInt) sse_decode_record_u_128_u_128(SseDeserializer deserializer);

  @protected
  Rune sse_decode_rune(SseDeserializer deserializer);

  @protected
  RuneId sse_decode_rune_id(SseDeserializer deserializer);

  @protected
  Runestone sse_decode_runestone(SseDeserializer deserializer);

  @protected
  SpacedRune sse_decode_spaced_rune(SseDeserializer deserializer);

  @protected
  Terms sse_decode_terms(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  void sse_encode_Char(String self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_artifact(Artifact self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_artifact(Artifact self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_cenotaph(Cenotaph self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_edict(Edict self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_etching(Etching self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_flaw(Flaw self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      (BigInt?, BigInt?) self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_record_u_128_u_128(
      (BigInt, BigInt) self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rune(Rune self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rune_id(RuneId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_runestone(
      Runestone self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_spaced_rune(
      SpacedRune self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_terms(Terms self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_cenotaph(Cenotaph self, SseSerializer serializer);

  @protected
  void sse_encode_edict(Edict self, SseSerializer serializer);

  @protected
  void sse_encode_etching(Etching self, SseSerializer serializer);

  @protected
  void sse_encode_flaw(Flaw self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_edict(List<Edict> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_opt_Char(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_artifact(
      Artifact? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_edict(Edict? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_etching(
      Etching? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_flaw(Flaw? self, SseSerializer serializer);

  @protected
  void
      sse_encode_opt_box_autoadd_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
          (BigInt?, BigInt?)? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_record_u_128_u_128(
      (BigInt, BigInt)? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rune(Rune? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rune_id(
      RuneId? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_terms(Terms? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_edict(List<Edict>? self, SseSerializer serializer);

  @protected
  void sse_encode_record_opt_box_autoadd_u_64_opt_box_autoadd_u_64(
      (BigInt?, BigInt?) self, SseSerializer serializer);

  @protected
  void sse_encode_record_u_128_u_128(
      (BigInt, BigInt) self, SseSerializer serializer);

  @protected
  void sse_encode_rune(Rune self, SseSerializer serializer);

  @protected
  void sse_encode_rune_id(RuneId self, SseSerializer serializer);

  @protected
  void sse_encode_runestone(Runestone self, SseSerializer serializer);

  @protected
  void sse_encode_spaced_rune(SpacedRune self, SseSerializer serializer);

  @protected
  void sse_encode_terms(Terms self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class OrdDartWire implements BaseWire {
  factory OrdDartWire.fromExternalLibrary(ExternalLibrary lib) =>
      OrdDartWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OrdDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
